"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[1408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:5},o="TextWidget",p={unversionedId:"primitives/text-widget",id:"primitives/text-widget",title:"TextWidget",description:"Widget for displaying text.",source:"@site/docs/primitives/text-widget.md",sourceDirName:"primitives",slug:"/primitives/text-widget",permalink:"/react-native-android-widget/docs/primitives/text-widget",draft:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/primitives/text-widget.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"default",previous:{title:"ImageWidget",permalink:"/react-native-android-widget/docs/primitives/image-widget"},next:{title:"IconWidget",permalink:"/react-native-android-widget/docs/primitives/icon-widget"}},s={},l=[{value:"Usage",id:"usage",level:2},{value:"Fonts",id:"fonts",level:2},{value:"Bare React Native",id:"bare-react-native",level:3},{value:"Expo",id:"expo",level:3},{value:"Example",id:"example",level:2},{value:"Props",id:"props",level:2}],d={toc:l};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"textwidget"},"TextWidget"),(0,i.kt)("p",null,"Widget for displaying text."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { FlexWidget, TextWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget>\n      <TextWidget\n        text=\"Hello\"\n        style={{\n          fontSize: 32,\n          fontFamily: 'Inter',\n          color: '#000000',\n        }}\n      />\n    </FlexWidget>\n  );\n}\n")),(0,i.kt)("h2",{id:"fonts"},"Fonts"),(0,i.kt)("p",null,"Text widget supports custom fonts, but we must provide the font file."),(0,i.kt)("h3",{id:"bare-react-native"},"Bare React Native"),(0,i.kt)("p",null,"To use a custom font in bare React Native app we must copy the font file(s) to ",(0,i.kt)("inlineCode",{parentName:"p"},"android/app/src/main/assets/fonts"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"fontFamily")," style prop will match the file by name."),(0,i.kt)("p",null,"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"android/app/src/main/assets/fonts/Inter.ttf")),(0,i.kt)("h3",{id:"expo"},"Expo"),(0,i.kt)("p",null,"To use a custom font in an Expo app, we can add them in the assets directory."),(0,i.kt)("p",null,"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"assets/fonts/Inter.ttf")),(0,i.kt)("p",null,"Then, when using the config plugin we must provide a list of all the custom fonts we need."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [\n    ['react-native-android-widget', {\n      fonts: ['./assets/fonts/Inter.ttf'],\n      widgets: [...],\n    }]\n  ],\n});\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Check the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sAleksovski/react-native-android-widget/blob/master/example/src/widgets/RotatedWidget.tsx"},"example widget")),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("p",null,"Check the props in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/public-api/interfaces/TextWidgetProps"},"Public API")," documentation"))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[1069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return n?i.createElement(m,a(a({ref:t},l),{},{components:n})):i.createElement(m,a({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},a="IconWidget",s={unversionedId:"primitives/icon-widget",id:"primitives/icon-widget",title:"IconWidget",description:"Widget for displaying icons.",source:"@site/docs/primitives/icon-widget.md",sourceDirName:"primitives",slug:"/primitives/icon-widget",permalink:"/react-native-android-widget/docs/primitives/icon-widget",draft:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/primitives/icon-widget.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"default",previous:{title:"TextWidget",permalink:"/react-native-android-widget/docs/primitives/text-widget"},next:{title:"SvgWidget",permalink:"/react-native-android-widget/docs/primitives/svg-widget"}},p={},c=[{value:"Usage",id:"usage",level:2},{value:"Fonts",id:"fonts",level:2},{value:"Bare React Native",id:"bare-react-native",level:3},{value:"Expo",id:"expo",level:3},{value:"Props",id:"props",level:2}],l={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"iconwidget"},"IconWidget"),(0,r.kt)("p",null,"Widget for displaying icons."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { FlexWidget, IconWidget } from \'react-native-android-widget\';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget>\n      <IconWidget font="material" size={36} icon="play_arrow" />\n    </FlexWidget>\n  );\n}\n')),(0,r.kt)("h2",{id:"fonts"},"Fonts"),(0,r.kt)("p",null,"Icon widget supports custom fonts, but we must provide the font file."),(0,r.kt)("h3",{id:"bare-react-native"},"Bare React Native"),(0,r.kt)("p",null,"To use a custom icon font in bare React Native app we must copy the font file(s) to ",(0,r.kt)("inlineCode",{parentName:"p"},"android/app/src/main/assets/fonts"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"font")," prop will match the file by name."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"android/app/src/main/assets/fonts/material.ttf")),(0,r.kt)("h3",{id:"expo"},"Expo"),(0,r.kt)("p",null,"To use a custom font in an Expo app, we can add them in the assets directory."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"assets/fonts/material.ttf")),(0,r.kt)("p",null,"Then, when using the config plugin we must provide a list of all the custom fonts we need."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [\n    ['react-native-android-widget', {\n      fonts: ['./assets/fonts/material.ttf'],\n      widgets: [...],\n    }]\n  ],\n});\n")),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("p",null,"Check the props in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/public-api/interfaces/IconWidgetProps"},"Public API")," documentation"))}d.isMDXComponent=!0}}]);